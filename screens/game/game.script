local hangout = require "lib.hangout"
local npcs = require "lib.data.npcs"
local levels = require "lib.data.levels"
local conversation = require "lib.conversation"

function init(self)
  local player = hangout.init_agent({ id = "player" })
  self.player = player
  player.popularity = levels.player_start_popularity

  local level = levels.levels[1]
  local agents = hangout.load_agents_from_level(player, level, npcs)

  self.conversation = conversation.init()

  self.controller = hangout.init_controller(agents, {
    duration = level.duration,

    on_change_topic = function (topic)
      if topic ~= nil then
        local text = self.conversation.get_next_line(topic.action)
        label.set_text("dialogue#text", topic.speaker.id .. ": " .. text)
        label.set_text("dialogue#action", topic.action)
        print("topic change: ", topic.speaker.id, text)
      else
        label.set_text("dialogue#text", "")
        label.set_text("dialogue#action", "")
        print("topic ended")
      end
    end,

    on_interruption_accepted = function (new_topic, old_topic)
      msg.post("interruption#label", "disable")
      print("interruption accepted: ", new_topic.speaker.id)
    end,

    on_interruption_denied = function (new_topic, old_topic)
      msg.post("interruption#label", "disable")
      print("interruption denied: ", new_topic.speaker.id)
    end,

    on_interruption_requested = function (new_topic, old_topic)
      msg.post("interruption#label", "enable")
      label.set_text("interruption#label", "INTERRUPTION!!! " .. new_topic.speaker.id)
      print("interruption requested: ", new_topic.speaker.id)
    end,

    on_gain_like = function (sender, target, like_amount, old_popularity, popularity)
      print("gained " .. like_amount .. " like: " .. sender.id .. "->" .. target.amount .. " popularity: " .. old_popularity .. "->" .. popularity)
    end,

    on_set_expectation = function (agent, expectation)
      print("set expectation:", agent.id, expectation)
    end
  })

  msg.post("interruption#label", "disable")
  msg.post(".", "acquire_input_focus")
end

function on_input(self, action_id, action)
  if action_id == hash("key_y") then
    if action.pressed then
      self.controller.try_speaking(self.player, "yes")
    end
  elseif action_id == hash("key_n") then
    if action.pressed then
      self.controller.try_speaking(self.player, "no")
    end
  elseif action_id == hash("key_m") then
    if action.pressed then
      self.controller.try_speaking(self.player, "more")
    end
  elseif action_id == hash("key_c") then
    if action.pressed then
      self.controller.try_speaking(self.player, "change")
    end
  elseif action_id == hash("key_space") then
    if action.pressed then
      self.controller.deny_interruption()
    end
  end
end

function update(self, dt)
  self.controller.update(dt)

  local topic, progress = self.controller.get_current_topic()
  label.set_text("dialogue#progress", tostring(progress))
end
