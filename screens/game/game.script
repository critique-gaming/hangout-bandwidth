local hangout = require "lib.hangout"
local npcs = require "lib.data.npcs"
local levels = require "lib.data.levels"
local dispatcher = require "crit.dispatcher"
local game = require "screens.game.game"

local h_choose_buttons_show = hash("choose_buttons_show")
local h__script = hash("/script")
local h_character_set_string_id = hash("character_set_string_id")
local h__root = hash("/root")
local h_script = hash("script")
local h_action_choose = hash("action_choose")
local h_level_timed_out = hash("level_timed_out")

local spawn_character

function init(self)
  self.sub_id = dispatcher.subscribe({ h_action_choose })

  local player = hangout.init_agent({ id = "player" })
  self.player = player
  player.popularity = levels.player_start_popularity

  local level = levels.levels[1]
  local agents = hangout.load_agents_from_level(player, level, npcs)

  self.character_factory = msg.url("character_factory#collectionfactory")

  self.characters = {}
  for _, agent in ipairs(agents) do
    if agent ~= player then
      local character_instance = spawn_character(self, agent.id)
      agent.go = character_instance
    end
  end

  local function update_button_state()
    dispatcher.dispatch(h_choose_buttons_show, {
      show = game.controller.can_agent_interrupt(self.player)
    })
  end

  game.controller = hangout.init_controller(agents, {
    duration = level.duration,

    on_change_topic = function (topic)
      if topic ~= nil then
        local text = game.conversation.get_next_line(topic.action)
        label.set_text("dialogue#text", topic.speaker.id .. ": " .. text)
        label.set_text("dialogue#action", topic.action)
        print("topic start: ", topic.speaker.id, topic.action, text)
      else
        label.set_text("dialogue#text", "")
        label.set_text("dialogue#action", "")
        print("topic ended")
      end
      update_button_state()
    end,

    on_interruption_accepted = function (new_topic, old_topic)
      update_button_state()

      msg.post("interruption#label", "disable")
      print("interruption accepted: ", new_topic.speaker.id)
    end,

    on_interruption_denied = function (new_topic, old_topic)
      update_button_state()

      msg.post("interruption#label", "disable")
      print("interruption denied: ", new_topic.speaker.id)
    end,

    on_interruption_requested = function (new_topic, old_topic)
      update_button_state()

      msg.post("interruption#label", "enable")
      label.set_text("interruption#label", "INTERRUPTION!!! " .. new_topic.speaker.id)

      print("interruption requested: ", new_topic.speaker.id)
    end,

    on_gain_like = function (sender, target, like_amount, old_popularity, popularity)
      print("gained " .. like_amount .. " like: " .. sender.id .. "->" .. target.id .. " popularity: " .. old_popularity .. "->" .. popularity)
    end,

    on_set_expectation = function (agent, expectation, real_expectation)
      print("set expectation:", agent.id, expectation, real_expectation)
    end,

    on_duration_expired = function ()
      update_button_state()
      dispatcher.dispatch(h_level_timed_out)
      print("game time expired")
    end,

    on_game_over = function ()
      update_button_state()

      print("game over")
    end,
  })

  msg.post("interruption#label", "disable")
  msg.post(".", "acquire_input_focus")
end

function final(self)
  dispatcher.unsubscribe(self.sub_id)
end

function on_input(self, action_id, action)
  if action_id == hash("key_space") then
    if action.pressed then
      game.controller.deny_interruption()
    end
  end
end

function spawn_character(self, agent_id)
  if not agent_id then
    return
  end

  local props = {
    [h__script] = {
      agent_id = hash(agent_id),
    }
  }

  local position = vmath.vector3(
    math.random(500, 1420),
    math.random(200, 600),
    0.0
  )

  local character = collectionfactory.create(self.character_factory, position, vmath.quat(), props, vmath.vector3(1.0))
  local character_url = msg.url(nil, character[h__root], h_script)
  msg.post(character_url, h_character_set_string_id, { id = agent_id })

  return character
end

function update(self, dt)
  game.controller.update(dt)

  local topic, progress = game.controller.get_current_topic()
  label.set_text("dialogue#progress", tostring(progress))
end

function on_message(self, message_id, message)
  if message_id == h_action_choose then
    game.controller.try_speaking(self.player, message.action)
  end
end
