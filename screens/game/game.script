local hangout = require "lib.hangout"
local npcs = require "lib.data.npcs"
local levels = require "lib.data.levels"
local dispatcher = require "crit.dispatcher"
local game = require "screens.game.game"

local h_choose_buttons_show = hash("choose_buttons_show")
local h__script = hash("/script")
local h__root = hash("/root")
local h_script = hash("script")
local h_action_choose = hash("action_choose")
local h_level_timed_out = hash("level_timed_out")
local h_deny_button_show = hash("deny_button_show")
local h_action_deny = hash("action_deny")
local h_show_bubble = hash("show_bubble")
local h_deny = hash("deny")
local h_show_expectation = hash("show_expectation")
local h_advance_scene = hash("advance_scene")
local h_set_popularity = hash("set_popularity")
local h_set_string_id = hash("set_string_id")

local spawn_character

function init(self)
  self.sub_id = dispatcher.subscribe({ h_action_choose, h_action_deny })

  local player = hangout.init_agent({ id = "player" })
  self.player = player
  player.popularity = levels.player_start_popularity

  local level = levels.levels[levels.current_level or 1]
  local agents = hangout.load_agents_from_level(player, level, npcs)

  self.character_factory = msg.url("character_factory#collectionfactory")

  self.characters = {}
  for _, agent in ipairs(agents) do
    local character_instance, script_url = spawn_character(self, agent.id)
    agent.go = character_instance
    agent.script = script_url
    msg.post(agent.script, h_set_popularity, { popularity = agent.popularity })
  end

  local function update_button_state()
    dispatcher.dispatch(h_choose_buttons_show, {
      show = game.controller.can_agent_interrupt(self.player)
    })
  end

  game.controller = hangout.init_controller(agents, {
    duration = level.duration,

    on_change_topic = function (topic, old_topic)
      if old_topic ~= nil then
        msg.post(old_topic.speaker.script, h_show_bubble, { text = nil })
      end

      if topic ~= nil then
        local text = game.conversation.get_next_line(topic.action)
        print("topic start: ", topic.speaker.id, topic.action, text)

        msg.post(topic.speaker.script, h_show_bubble, {
          text = text, action = topic.action
        })
      else
        print("topic ended")
      end

      update_button_state()
    end,

    on_interruption_accepted = function (new_topic, old_topic)
      print("interruption accepted: ", new_topic.speaker.id)
      update_button_state()
    end,

    on_interruption_denied = function (new_topic, old_topic)
      print("interruption denied: ", new_topic.speaker.id)
      update_button_state()
      msg.post(new_topic.speaker.script, h_deny)
      sound.play("sfx#deny")
    end,

    on_interruption_requested = function (new_topic, old_topic)
      print("interruption requested: ", new_topic.speaker.id)

      update_button_state()
      msg.post(new_topic.speaker.script, h_show_bubble, {
        text = "", action = new_topic.action
      })
    end,

    on_gain_like = function (sender, target, like_amount, old_popularity, popularity)
      print("gained " .. like_amount .. " like: " .. sender.id .. "->" .. target.id .. " popularity: " .. old_popularity .. "->" .. popularity)
      sound.play(like_amount > 0 and "sfx#like" or "sfx#dislike")
    end,

    on_set_expectation = function (agent, expectation, real_expectation)
      print("set expectation:", agent.id, expectation, real_expectation)
      msg.post(agent.script, h_show_expectation, { action = expectation })
      if expectation ~= nil then
        sound.play("sfx#new_expectation")
      end
    end,

    on_duration_expired = function ()
      update_button_state()
      dispatcher.dispatch(h_level_timed_out)
      print("game time expired")

      timer.delay(3, false, function ()
        dispatcher.dispatch(h_advance_scene)
      end)
    end,

    on_game_over = function ()
      update_button_state()

      print("game over")
    end,
  })

  function player.request_interruption()
    if game.controller.can_deny_interruption() then
      dispatcher.dispatch(h_deny_button_show, { show = true })
    end
  end

  function player.interrupted()
    dispatcher.dispatch(h_deny_button_show, { show = false })
  end
end

function final(self)
  dispatcher.unsubscribe(self.sub_id)
end

function spawn_character(self, agent_id)
  if not agent_id then
    return
  end

  local props = {
    [h__script] = {
      agent_id = hash(agent_id),
    }
  }

  local position = vmath.vector3(
    math.random(500, 1420),
    math.random(200, 600),
    0.0
  )

  local character = collectionfactory.create(self.character_factory, position, vmath.quat(), props, vmath.vector3(1.0))
  local character_url = msg.url(nil, character[h__root], h_script)
  msg.post(character_url, h_set_string_id, { id = agent_id })

  return character, character_url
end

function update(self, dt)
  game.controller.update(dt)
end

function on_message(self, message_id, message)
  if message_id == h_action_choose then
    game.controller.try_speaking(self.player, message.action)
  elseif message_id == h_action_deny then
    game.controller.deny_interruption(self.player)
  end
end
