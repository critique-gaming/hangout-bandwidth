local dispatcher = require "crit.dispatcher"
local util = require "lib.util"

local h_scale = hash("scale")
local h_enable = hash("enable")
local h_disable = hash("disable")
local h_set_string_id = hash("set_string_id")
local h_set_state = hash("set_state")
local h_set_popularity = hash("set_popularity")
local h_position = hash("position")
local h_default = hash("default")
local h_contact_point_response = hash("contact_point_response")

local STATE_IDLE = 1
local STATE_TALKING = 2
local STATE_WALKING = 3
local STATE_INTERRUPTING = 4

local state_idle = "idle"
local state_talking = "talk"
local state_walking = "walk"
local state_interrupting = "interrupt"

local states = {
  [STATE_IDLE] = {
    name = state_idle,
    flipbook = "_idle",
  },
  [STATE_TALKING] = {
    name = state_talking,
    flipbook = "_speak",
  },
  [STATE_WALKING] = {
    name = state_walking,
    flipbook = "_walk",
  },
  [STATE_INTERRUPTING] = {
    name = state_interrupting,
    flipbook = "_idle",
  }
}

local collision_groups = {
  [h_default] = true;
}

local set_state
local on_state_change
local show_bubble
local show_expectation
local get_speed
local get_new_wander_position

go.property("agent_id", hash(""))
go.property("scale", 0.75)
go.property("z", 0.0)
go.property("movement_speed", 50)
go.property("screen_limits_x", vmath.vector3(300, 1620, 0.0))
go.property("screen_limits_y", vmath.vector3(100, 780, 0.0))
go.property("wander_min_radius", 20)
go.property("wander_max_radius", 60)

function init(self)
  --self.sub_id = dispatcher.subscribe({})

  self.state_name_to_id = {}
  for id, state in ipairs(states) do
    self.state_name_to_id[state.name] = id
  end

  self.root = msg.url("root")
  self.go = msg.url("character")
  self.sprite = msg.url("character#sprite")

  self.bubble_root_go = msg.url("bubble_root")
  self.bubble_go = msg.url("bubble")
  self.bubble_sprite = msg.url("bubble#sprite")
  self.bubble_label = msg.url("bubble#label")

  self.expectation_go = msg.url("expectation")
  self.expectation_sprite = msg.url("expectation#sprite")

  self.popularity_go = msg.url("popularity")
  self.popularity_fill = msg.url("popularity#fill")
  self.popularity_background = msg.url("popularity#background")

  self.string_id = ""

  -- set up initial state
  go.set(self.go, h_scale, self.scale)
  self.state = STATE_IDLE
  show_bubble(self)
  show_expectation(self)
  self.hflip = false
  self.position = go.get(self.root, h_position)
  self.speed = vmath.vector3(0.0)
  self.wander_position = vmath.vector3(0.0)
  self.wander_start_position = go.get(self.root, h_position)

  local debug_state_index = 1
  timer.delay(2.0, true, function ()
    debug_state_index = debug_state_index + 1
    if debug_state_index > #states then
      debug_state_index = 1
    end
    set_state(self, states[debug_state_index].name)
  end)
end

function set_state(self, state_name)
  if not state_name or not self.state_name_to_id[state_name] then
    return
  end
  local state = self.state_name_to_id[state_name]
  if state ~= self.state then
    local old_state = self.state
    self.state = state
    on_state_change(self, old_state)
  end
end

function on_state_change(self, old_state)
  local state = self.state
  local animation_id = hash("character_" .. self.string_id .. states[self.state].flipbook)
  animation_id = hash("character_test_idle")
  -- local default_animation_id = hash("character_" .. self.string_id .. states[STATE_IDLE].flipbook)
  sprite.play_flipbook(self.sprite, animation_id)

  if (state == STATE_WALKING) then
    self.wander_position = get_new_wander_position(self)
  end

end

function get_new_wander_position(self)
  local rand = self.wander_min_radius + math.random() * (self.wander_max_radius - self.wander_min_radius)
  local r = self.wander_max_radius * math.sqrt(rand)
  local theta = math.random() * 2.0 * math.pi
  local x = r * math.cos(theta)
  local y = r * math.sin(theta)
  print(x, y)
  x = x + self.position.x
  y = y + self.position.y
  return vmath.vector3(x, y, 0)
end

function show_bubble(self, text)
  if text then
    msg.post(self.bubble_go, h_enable)
    label.set_text(self.bubble_label, text)
  else
    msg.post(self.bubble_go, h_disable)
  end
end

function get_speed(self, dt)
  local speed = vmath.vector3(0.0)
  if self.state == STATE_WALKING then
    self.wander_start_position = go.get(self.root, h_position)
    speed = vmath.normalize(self.wander_start_position - self.wander_position) * self.movement_speed * dt
    --speed = vmath.vector3(self.movement_speed * dt, self.movement_speed * dt, 0.0)
  end
  -- dt = dt * 60.0
  return speed
end

local function animate(self, hflip)
  -- local this_sprite = self.sprite

  if hflip ~= self.hflip then
    sprite.set_hflip(self.sprite, hflip)
  end
end

function update(self, dt)
  -- reset accumulated collision deltas
  self.hitbox_correction = vmath.vector3(0.0)

  local speed = get_speed(self, dt)
  local horizontal_flip = speed.x > 0 and true or false

  local new_position = vmath.vector3(
    self.position.x + speed.x,
    self.position.y + speed.y,
    self.z
  )

  self.position = new_position
  self.position = util.clamp_vector(
    self.position,
    self.screen_limits_x.x,
    self.screen_limits_x.y,
    self.screen_limits_y.x,
    self.screen_limits_y.y,
    0.0,
    0.0
  )

  go.set(self.root, h_position, self.position)
  animate(self, horizontal_flip)

  self.speed = speed
end

function show_expectation(self, expectation)
  msg.post(self.expectation_go, expectation and h_enable or h_disable)
end

function final(self)
  --dispatcher.unsubscribe(self.sub_id)
end

function on_message(self, message_id, message, sender)
  if message_id == h_contact_point_response then
    local position = self.position
    local response = message

    if collision_groups[response.group] then
      local penetration = response.distance
      if penetration > 0 then
        local normal = response.normal
        local projection  = vmath.project(self.hitbox_correction, normal * penetration)
        if projection < 1 then
          local comp = (penetration - penetration * projection) * normal
          local old_pos = vmath.vector3(position.x, position.y, 0.0)
          local new_pos = old_pos + comp

          self.position = vmath.vector3(new_pos.x, new_pos.y, self.z)
          go.set(self.root, h_position, position)
          self.hitbox_correction = self.hitbox_correction + comp
        end
      end
    end

  elseif message_id == h_set_state then
    set_state(self, message.state)
  elseif message_id == h_set_string_id then
    self.string_id = message.id
  elseif message_id == h_set_popularity then
    self.popularity = message.popularity
  end
end
