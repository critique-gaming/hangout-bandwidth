local dispatcher = require "crit.dispatcher"
local util = require "lib.util"
local colors = require "lib.colors"

local h_scale = hash("scale")
local h_enable = hash("enable")
local h_disable = hash("disable")
local h_set_string_id = hash("set_string_id")
local h_set_state = hash("set_state")
local h_set_popularity = hash("set_popularity")
local h_position = hash("position")
local h_default = hash("default")
local h_contact_point_response = hash("contact_point_response")
local h_show_expectation = hash("show_expectation")
local h_show_bubble = hash("show_bubble")
local h_deny = hash("deny")
local h_positionz = hash("position.z")
local h_positiony = hash("position.y")
local h_eulerz = hash("euler.z")
local h_tint = hash("tint")
local h_size = hash("size")
local h_tint_w = hash("tint.w")
local h_color_w = hash("color.w")
local h_color = hash("color")

local STATE_IDLE = 1
local STATE_TALKING = 2
local STATE_WALKING = 3
local STATE_INTERRUPTING = 4

local state_idle = "idle"
local state_talking = "talk"
local state_walking = "walk"
local state_interrupting = "interrupt"

local states = {
  [STATE_IDLE] = {
    name = state_idle,
    flipbook = "",
  },
  [STATE_TALKING] = {
    name = state_talking,
    flipbook = "",
  },
  [STATE_WALKING] = {
    name = state_walking,
    flipbook = "",
  },
  [STATE_INTERRUPTING] = {
    name = state_interrupting,
    flipbook = "",
  }
}

local collision_groups = {
  [h_default] = true;
}

local set_state
local on_state_change
local show_bubble
local show_expectation
local get_speed
local get_new_wander_position
local set_popularity
local show_player_indicator

go.property("agent_id", hash(""))
go.property("scale", 0.75)
go.property("z", 0.0)
go.property("movement_speed", 50)
go.property("screen_limits_x", vmath.vector3(500, 1620, 0.0))
go.property("screen_limits_y", vmath.vector3(100, 780, 0.0))
go.property("wander_min_radius", 20)
go.property("wander_max_radius", 60)
go.property("chance_to_wander", 0.6)
go.property("min_move_duration", 1.0)
go.property("max_move_duration", 3.0)

function init(self)
  --self.sub_id = dispatcher.subscribe({})

  self.state_name_to_id = {}
  for id, state in ipairs(states) do
    self.state_name_to_id[state.name] = id
  end

  self.root = msg.url("root")
  self.go = msg.url("character")
  self.sprite = msg.url("character#sprite")

  self.bubble_root_go = msg.url("bubble_root")
  self.bubble_go = msg.url("bubble")
  self.bubble_sprite = msg.url("bubble#sprite")
  self.bubble_label = msg.url("bubble#label")
  self.deny_sprite = msg.url("bubble#deny")

  self.expectation_go = msg.url("expectation")
  self.expectation_sprite = msg.url("expectation#sprite")
  self.expectation_icon = msg.url("expectation#icon")

  self.popularity_go = msg.url("popularity")
  self.popularity_fill = msg.url("popularity#fill")
  self.popularity_background = msg.url("popularity#background")
  self.popularity_bar_size = go.get(self.popularity_background, h_size)
  go.set(self.popularity_background, h_tint, colors.black)

  self.shadow_go = msg.url("shadow")
  self.shadow_position = go.get(self.shadow_go, h_position)

  self.player_indicator = msg.url("player_indicator")
  self.player_indicator_position = go.get(self.player_indicator, h_position)
  self.player_indicator_sprite = msg.url("player_indicator#sprite")
  self.player_indicator_label = msg.url("player_indicator#label")

  self.string_id = ""

  -- set up initial state
  go.set(self.go, h_scale, self.scale)
  show_expectation(self)
  self.hflip = false
  self.position = go.get(self.root, h_position)
  self.speed = vmath.vector3(0.0)
  self.wander_position = vmath.vector3(0.0)
  self.wander_start_position = go.get(self.root, h_position)
  self.state_time = 0.0
  self.wander_position = get_new_wander_position(self)
  show_player_indicator(self, false)

  go.set_scale(vmath.vector3(0.01, 0.01, 1), self.bubble_go)
  label.set_text(self.bubble_label, "")
  go.set(self.bubble_label, h_color_w, 0)
  go.set(self.bubble_sprite, h_tint_w, 0)
  msg.post(self.bubble_go, h_disable)
  self.bubble_shown = false
end

function set_state(self, state_name)
  local state
  if type(state_name) == "number" then
    state = state_name
  elseif type(state_name) == "string" then
    if self.state_name_to_id[state_name] then
      state = self.state_name_to_id[state_name]
    end
  end

  if state and state ~= self.state then
    local old_state = self.state
    self.state = state
    on_state_change(self, old_state)
  end
end

function on_state_change(self, old_state)
  self.state_time = 0
  if self.wander_timer then
    timer.cancel(self.wander_timer)
    self.wander_timer = nil
  end
  local state = self.state
  local animation_id = hash("character_" .. self.string_id .. states[self.state].flipbook)
  -- local default_animation_id = hash("character_" .. self.string_id .. states[STATE_IDLE].flipbook)
  sprite.play_flipbook(self.sprite, animation_id)

  local should_do_walk_bounce = false
  if (state == STATE_WALKING) then
    self.wander_position = get_new_wander_position(self)
    should_do_walk_bounce = true
  end

  if should_do_walk_bounce then
    timer.delay(math.random() * 0.1, false, function ()
      go.cancel_animations(self.go, h_positiony)
      go.cancel_animations(self.go, h_eulerz)
      go.set(self.go, h_positiony, 0.0)
      go.animate(self.go, h_positiony, go.PLAYBACK_LOOP_PINGPONG, 10.0, gui.EASING_OUTEXPO, 0.3)

      local function animate_rotation()
        go.animate(self.go, h_eulerz, go.PLAYBACK_ONCE_FORWARD, -1.5, gui.EASING_OUTEXPO, 0.3, 0.0, function ()
          go.animate(self.go, h_eulerz, go.PLAYBACK_ONCE_FORWARD, 1.5, gui.EASING_OUTEXPO, 0.3, 0.0, function ()
            animate_rotation()
          end)
        end)
      end
      animate_rotation()
    end)

  else
    go.cancel_animations(self.go, h_positiony)
    go.cancel_animations(self.go, h_eulerz)
    go.animate(self.go, h_positiony, go.PLAYBACK_ONCE_FORWARD, 0.0, gui.EASING_OUTEXPO, 0.15)
    go.animate(self.go, h_eulerz, go.PLAYBACK_ONCE_FORWARD, 0.0, gui.EASING_OUTEXPO, 0.15)
  end
end

function get_new_wander_position(self)
  self.wander_duration = self.min_move_duration + math.random() * (self.max_move_duration - self.min_move_duration)
  local rand = self.wander_min_radius + math.random() * (self.wander_max_radius - self.wander_min_radius)
  local r = self.wander_max_radius * math.sqrt(rand)
  local theta = math.random() * 2.0 * math.pi
  local x = r * math.cos(theta)
  local y = r * math.sin(theta)
  x = x + self.position.x
  y = y + self.position.y
  return vmath.vector3(x, y, 0)
end

local function simplify_action(action)
  if action == "followup_more" then
    return "more"
  end
  return action
end

function show_player_indicator(self, show)
  msg.post(self.player_indicator, show and h_enable or h_disable)
  go.set(self.player_indicator_sprite, h_tint, colors.green_positive)
  go.set(self.player_indicator_label, h_color, colors.green_positive)

  go.cancel_animations(self.player_indicator, h_positiony)
  go.animate(self.player_indicator, h_positiony, go.PLAYBACK_LOOP_PINGPONG, self.player_indicator_position.y + 10.0, gui.EASING_INOUTSINE, 1.0)
end

function show_bubble(self, text, action)
  go.cancel_animations(self.bubble_go, h_scale)
  go.cancel_animations(self.bubble_label, h_color_w)
  go.cancel_animations(self.bubble_sprite, h_tint_w)

  if text and text ~= "" then
    if text ~= "" then
      local sound_url = msg.url("mumbles" .. "#sound" ..math.random(1, 16))
      sound.play(sound_url)
    end
    set_state(self, STATE_TALKING)
    label.set_text(self.bubble_label, text)
    go.animate(self.bubble_label, h_color_w, go.PLAYBACK_ONCE_FORWARD, 1.0, go.EASING_LINEAR, 0.3)
  else
    set_state(self, math.random() < self.chance_to_wander and STATE_WALKING or STATE_IDLE)
    go.animate(self.bubble_label, h_color_w, go.PLAYBACK_ONCE_FORWARD, 0.0, go.EASING_LINEAR, 0.3)
  end

  local shown = text ~= nil
  if shown == self.bubble_shown then
    return
  end
  self.bubble_shown = shown

  if shown then
    msg.post(self.bubble_go, h_enable)
    msg.post(self.deny_sprite, h_disable)
    local duration = text == "" and 1.0 or 0.3
    local easing = text == "" and go.EASING_OUTEXPO or go.EASING_OUTBACK
    go.animate(self.bubble_go, h_scale, go.PLAYBACK_ONCE_FORWARD, vmath.vector3(1.0), easing, duration)
    go.animate(self.bubble_sprite, h_tint_w, go.PLAYBACK_ONCE_FORWARD, 1.0, go.EASING_LINEAR, 0.3)
    if action ~= nil then
      go.set(self.bubble_sprite, h_tint, colors.actions[simplify_action(action)])
    end
  else
    go.animate(self.bubble_sprite, h_tint_w, go.PLAYBACK_ONCE_FORWARD, 1.0, go.EASING_LINEAR, 0.3)
    go.animate(self.bubble_go, h_scale, go.PLAYBACK_ONCE_FORWARD, vmath.vector3(0.01, 0.01, 1.0), go.EASING_OUTEXPO, 0.3, 0.0, function ()
      msg.post(self.bubble_go, h_disable)
    end)
  end
end

function get_speed(self, dt)
  local speed = vmath.vector3(0.0)
  if self.state == STATE_WALKING then
    self.wander_start_position = go.get(self.root, h_position)
    speed = vmath.normalize(self.wander_start_position - self.wander_position) * self.movement_speed * dt
  end
  return speed
end

local function animate(self, hflip)
  if hflip ~= self.hflip then
    sprite.set_hflip(self.sprite, hflip)
    local shadow_position = self.shadow_position
    if hflip then
      shadow_position = vmath.vector3(
        -self.shadow_position.x,
        self.shadow_position.y,
        self.shadow_position.z
      )
    end
    go.set(self.shadow_go, h_position, shadow_position)
    self.hflip = hflip
  end
end

function set_popularity(self, popularity)
  self.popularity = popularity
  local fill_size = popularity * self.popularity_bar_size.x

  go.set(self.popularity_fill, h_size, vmath.vector3(
    fill_size,
    self.popularity_bar_size.y - 2,
    self.popularity_bar_size.z
  ))

  local fill_color = vmath.lerp(popularity, colors.red_negative, colors.green_positive)
  go.set(self.popularity_fill, h_tint, fill_color)
end

function update(self, dt)
  self.state_time = self.state_time + dt
  -- reset accumulated collision deltas
  self.hitbox_correction = vmath.vector3(0.0)

  local speed = get_speed(self, dt)
  local horizontal_flip = speed.x > 0 and true or false

  if self.state == STATE_WALKING then
    -- wander until duration elapses, then stop and set a timer to wander again after a random time
    if (self.wander_duration and self.state_time > self.wander_duration) then
      set_state(self, STATE_IDLE)
      self.wander_timer = timer.delay(0.3 + math.random() * 4.0, false, function ()
        set_state(self, STATE_WALKING)
      end)
    end
  end
  if self.state ~= STATE_WALKING then
    horizontal_flip = self.hflip
  end

  local new_position = vmath.vector3(
    self.position.x + speed.x,
    self.position.y + speed.y,
    self.z
  )

  self.position = new_position
  self.position = util.clamp_vector(
    self.position,
    self.screen_limits_x.x,
    self.screen_limits_x.y,
    self.screen_limits_y.x,
    self.screen_limits_y.y,
    0.0,
    0.0
  )

  go.set(self.root, h_position, self.position)
  animate(self, horizontal_flip)

  local char_z = util.remap_value(self.position.y, 0.0, 1080, 0.2, -0.2)
  go.set(self.go, h_positionz, char_z)
  go.set(self.bubble_root_go, h_positionz, char_z)

  self.speed = speed
end

function show_expectation(self, expectation)
  go.cancel_animations(self.expectation_go, h_scale)
  go.cancel_animations(self.expectation_icon, h_tint_w)
  go.cancel_animations(self.expectation_sprite, h_tint_w)

  if expectation ~= nil then
    msg.post(self.expectation_go, h_enable)
    go.animate(self.expectation_go, h_scale, go.PLAYBACK_ONCE_FORWARD, vmath.vector3(1.0), go.EASING_OUTBACK, 0.3)
    go.animate(self.expectation_sprite, h_tint_w, go.PLAYBACK_ONCE_FORWARD, 1.0, go.EASING_LINEAR, 0.3)
    go.animate(self.expectation_icon, h_tint_w, go.PLAYBACK_ONCE_FORWARD, 1.0, go.EASING_LINEAR, 0.3)
    sprite.play_flipbook(self.expectation_icon, hash(expectation))
  else
    go.animate(self.expectation_sprite, h_tint_w, go.PLAYBACK_ONCE_FORWARD, 1.0, go.EASING_LINEAR, 0.3)
    go.animate(self.expectation_icon, h_tint_w, go.PLAYBACK_ONCE_FORWARD, 1.0, go.EASING_LINEAR, 0.3)
    go.animate(self.expectation_go, h_scale, go.PLAYBACK_ONCE_FORWARD, vmath.vector3(0.01, 0.01, 1.0), go.EASING_OUTEXPO, 0.3, 0.0, function ()
      msg.post(self.expectation_go, h_disable)
    end)
  end
end

local function deny(self)
  msg.post(self.deny_sprite, h_enable)
  go.set(self.deny_sprite, h_tint_w, 0)
  go.set(self.deny_sprite, h_scale, vmath.vector3(1.5, 1.5, 1.0))
  go.animate(self.deny_sprite, h_tint_w, go.PLAYBACK_ONCE_FORWARD, 1.0, go.EASING_LINEAR, 0.3)
  go.animate(self.deny_sprite, h_scale, go.PLAYBACK_ONCE_FORWARD, vmath.vector3(1.0), go.EASING_OUTEXPO, 0.5, 0.0, function ()
    show_bubble(self, nil)
  end)
end

function on_message(self, message_id, message, sender)
  if message_id == h_contact_point_response then
    local position = self.position
    local response = message

    if collision_groups[response.group] then
      local penetration = response.distance
      if penetration > 0 then
        local normal = response.normal
        local projection  = vmath.project(self.hitbox_correction, normal * penetration)
        if projection < 1 then
          local comp = (penetration - penetration * projection) * normal
          local old_pos = vmath.vector3(position.x, position.y, 0.0)
          local new_pos = old_pos + comp

          self.position = vmath.vector3(new_pos.x, new_pos.y, self.z)
          go.set(self.root, h_position, position)
          self.hitbox_correction = self.hitbox_correction + comp
        end
      end
    end

  elseif message_id == h_set_state then
    set_state(self, message.state)
  elseif message_id == h_set_string_id then
    self.string_id = message.id
    if message.id == "player" then
      show_player_indicator(self, true)
    end
    set_state(self, STATE_IDLE)

  elseif message_id == h_set_popularity then
    set_popularity(self, message.popularity)
  elseif message_id == h_show_bubble then
    show_bubble(self, message.text, message.action)
  elseif message_id == h_show_expectation then
    show_expectation(self, message.action)
  elseif message_id == h_deny then
    deny(self)
  end
end
