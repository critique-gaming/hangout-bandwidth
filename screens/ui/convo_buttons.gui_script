local dispatcher = require "crit.dispatcher"
local Layout = require "crit.layout"
local button_rect = require "screens.ui.button_rect_choose"
local colors = require "lib.colors"

local h_window_change_size = hash("window_change_size")
local h_acquire_input_focus = hash("acquire_input_focus")
local h_action_choose = hash("action_choose")
local h_choose_buttons_show = hash("choose_buttons_show")

local show

local button_defs = {
  [1] = {
    text = "Accept",
    action_name = "yes",
    color = colors.white,
    action = function ()
      dispatcher.dispatch(h_action_choose, { action = "yes" })
    end,
  },
  [2] = {
    text = "Contradict",
    action_name = "no",
    color = colors.white,
    action = function ()
      dispatcher.dispatch(h_action_choose, { action = "no" })
    end,
  },

  [3] = {
    text = "Ask For More",
    color = colors.white,
    action_name = "more",
    action = function ()
      dispatcher.dispatch(h_action_choose, { action = "more" })
    end,
  },

  [4] = {
    text = "Change Subject",
    color = colors.white,
    action_name = "change",
    action = function ()
      dispatcher.dispatch(h_action_choose, { action = "change" })
    end,
  },
}
local button_size_x = 210
local button_size_y = 70

function init(self)
  self.sub_id = dispatcher.subscribe({
    h_window_change_size
  })

  self.root = gui.get_node("root")
  self.container = gui.get_node("container")
  self.button_container = gui.get_node("button_container")
  self.button_container_pos = gui.get_position(self.button_container)
  self.button_container_size = gui.get_size(self.button_container)

  self.layout = Layout.new()
  self.layout.add_node(self.root)
  self.layout.add_node(self.container)

  self.button_template = gui.get_node("button_rect/button")
  self.button_template_orig_pos = gui.get_position(self.button_template)
  gui.set_enabled(self.button_template, false)

  self.buttons = {}
  for i, def in ipairs(button_defs) do
    def.size_x = button_size_x
    def.size_y = button_size_y
    local button = button_rect.make_button(self.button_template, def)

    -- layout
    local pos = vmath.vector3(
      self.button_template_orig_pos.x + (i - 1) * self.button_container_size.x / (#button_defs - 1) - self.button_container_size.x * 0.5,
      self.button_template_orig_pos.y,
      self.button_template_orig_pos.z
    )

    gui.set_position(button.nodes.root, pos)
    self.buttons[i] = button
  end

  gui.set_enabled(self.button_container, false)

  timer.delay(4.0, true, function()
    show(self, true)
  end)
  timer.delay(2.0, false, function()
    timer.delay(4.0, true, function()
      show(self, false)
    end)
  end)

  msg.post(".", h_acquire_input_focus)
end

function show(self, shown)
  local shown_pos = vmath.vector3(
    self.button_container_pos.x,
    self.button_container_pos.y,
    self.button_container_pos.z
  )
  local hidden_pos = vmath.vector3(
    self.button_container_pos.x,
    self.button_container_pos.y - 50,
    self.button_container_pos.z
  )
  local position = shown_pos
  local delay = 0
  local easing = gui.EASING_OUTCUBIC
  local duration = 0.3
  local button_shown_color = colors.white
  local button_hidden_color = colors.white
  local button_color = button_shown_color

  if shown then
    gui.set_enabled(self.button_container, true)
  else
    position = hidden_pos
    delay = 0.3
    duration = 0.6
    button_color = colors.transparent_white
  end

  gui.set_position(self.button_container, shown and hidden_pos or shown_pos)

  gui.animate(self.button_container, gui.PROP_POSITION, position, easing, duration, delay, function ()
    gui.set_enabled(self.button_container, shown)
  end)

  for i, button in ipairs(self.buttons) do
    button.set_enabled(shown)
    gui.set_color(button.nodes.root, shown and button_shown_color or button_hidden_color)
    gui.animate(button.nodes.root, gui.PROP_COLOR, button_color, gui.EASING_LINEAR, duration, delay)
  end

end

function final(self)
  dispatcher.unsubscribe(self.sub_id)
end

function update(self, dt)

end

function on_message(self, message_id, message, sender)
  if message_id == h_window_change_size then
    self.layout.place()
  elseif message_id == h_choose_buttons_show then
    show(self, message.show)
  end
end

function on_input(self, action_id, action)
  for i, button in ipairs(self.buttons) do
    if button.on_input(action_id, action) then
      return true;
    end
  end
end
