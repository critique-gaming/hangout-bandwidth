local dispatcher = require "crit.dispatcher"

local h_attempt_toggle_pause = hash("attempt_toggle_pause")
local h_acquire_input_focus = hash("acquire_input_focus")
local h_release_input_focus = hash("release_input_focus")
local h_scene_set_time_step = hash("scene_set_time_step")
local h_touch = hash("touch")

function init(self)
  self.background = gui.get_node("background")
  gui.set_enabled(self.background, false)

  self.paused = false

  self.sub_id = dispatcher.subscribe({ h_attempt_toggle_pause })
end

function final(self)
  dispatcher.unsubscribe(self.sub_id)
end

local function set_paused(self, paused)
  self.paused = paused

  gui.set_enabled(self.background, paused)
  if paused then
    msg.post(".", h_acquire_input_focus)
  else
    msg.post(".", h_release_input_focus)
  end

  dispatcher.dispatch(h_scene_set_time_step, { factor = paused and 0 or 1 })
end

function on_message(self, message_id, message, sender)
  if message_id == h_attempt_toggle_pause then
    set_paused(self, not self.paused)
  end
end

function on_input(self, action_id, action)
  if action_id == h_touch and action.released then
    dispatcher.dispatch(h_attempt_toggle_pause)
  end
  return true -- Steal all input
end
